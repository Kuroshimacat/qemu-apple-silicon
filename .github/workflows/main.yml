name: Build

on:
  push:
    branches:
      - master
      - dev

jobs:
  msys2-64bit:
    runs-on: windows-latest
    steps:
      - name: Acquire msys2.exe installer
        run: |
          Write-Output "Acquiring msys2.exe installer at $(Get-Date -Format u)"
          If ( !(Test-Path -Path msys64\var\cache ) ) {
            mkdir msys64\var\cache
          }
          Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe.sig" -outfile "msys2.exe.sig"
          if ( Test-Path -Path msys64\var\cache\msys2.exe.sig ) {
            Write-Output "Cached installer sig"
            if ( ((Get-FileHash msys2.exe.sig).Hash -ne (Get-FileHash msys64\var\cache\msys2.exe.sig).Hash) ) {
              Write-Output "Mis-matched installer sig, new installer download required"
              Remove-Item -Path msys64\var\cache\msys2.exe.sig
              if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                Remove-Item -Path msys64\var\cache\msys2.exe
              }
            } else {
              Write-Output "Matched installer sig, cached installer still valid"
            }
          } else {
            Write-Output "No cached installer sig, new installer download required"
            if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
              Remove-Item -Path msys64\var\cache\msys2.exe
            }
          }
          if ( !(Test-Path -Path msys64\var\cache\msys2.exe ) ) {
            Write-Output "Fetching latest installer"
            Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe" -outfile "msys64\var\cache\msys2.exe"
            Copy-Item -Path msys2.exe.sig -Destination msys64\var\cache\msys2.exe.sig
          } else {
            Write-Output "Using cached installer"
          }
          Write-Output "Invoking msys2.exe installer at $(Get-Date -Format u)"
          msys64\var\cache\msys2.exe -y
          # Create directory if it doesn't exist
          if (!(Test-Path -Path "${GITHUB_WORKSPACE}\msys64\etc\post-install")) {
            mkdir "${GITHUB_WORKSPACE}\msys64\etc\post-install"
          }
          ((Get-Content -path .\msys64\etc\\post-install\\07-pacman-key.post -Raw) -replace '--refresh-keys', '--version') | Set-Content -Path "${GITHUB_WORKSPACE}\msys64\etc\\post-install\\07-pacman-key.post"
          .\msys64\usr\bin\bash -lc "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Normal update
          taskkill /F /FI "MODULES eq msys-2.0.dll"
      - name: Install mingw packages
        run: |
          Write-Output "Installing mingw packages at $(Get-Date -Format u)"
          .\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm --needed bison diffutils flex git grep make sed $MINGW_TARGET-binutils $MINGW_TARGET-capstone $MINGW_TARGET-ccache $MINGW_TARGET-curl $MINGW_TARGET-cyrus-sasl $MINGW_TARGET-dtc $MINGW_TARGET-gcc $MINGW_TARGET-glib2 $MINGW_TARGET-gnutls $MINGW_TARGET-gtk3 $MINGW_TARGET-libgcrypt $MINGW_TARGET-libjpeg-turbo $MINGW_TARGET-libnfs $MINGW_TARGET-libpng $MINGW_TARGET-libssh $MINGW_TARGET-libtasn1 $MINGW_TARGET-lzo2 $MINGW_TARGET-nettle $MINGW_TARGET-ninja $MINGW_TARGET-pixman $MINGW_TARGET-pkgconf $MINGW_TARGET-python $MINGW_TARGET-SDL2 $MINGW_TARGET-SDL2_image $MINGW_TARGET-snappy $MINGW_TARGET-zstd $EXTRA_PACKAGES"
      - name: Run build
        run: |
          Write-Output "Running build at $(Get-Date -Format u)"
          $env:CHERE_INVOKING = 'yes'
          $env:MSYS = 'winsymlinks:native'
          $env:CCACHE_BASEDIR = "$env:GITHUB_WORKSPACE"
          $env:CCACHE_DIR = "$env:CCACHE_BASEDIR/ccache"
          $env:CCACHE_MAXSIZE = "500M"
          $env:CCACHE_DEPEND = 1
          $env:CC = "ccache gcc"
          mkdir build
          cd build
          ..\msys64\usr\bin\bash -lc "ccache --zero-stats"
          ..\msys64\usr\bin\bash -lc "../configure --enable-fdt=system $CONFIGURE_ARGS"
          ..\msys64\usr\bin\bash -lc "make"
          ..\msys64\usr\bin\bash -lc "make check MTESTARGS='$TEST_ARGS' || { cat meson-logs/testlog.txt; exit 1; } ;"
          ..\msys64\usr\bin\bash -lc "ccache --show-stats"
          Write-Output "Finished build at $(Get-Date -Format u)"
